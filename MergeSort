class MergeSorting{
  void mergeSort(int a[], int l,int m,int r){
   int n1= m-l+1;
   int n2=r-m;
  int L[] = new int[n1];
	int R[] = new int[n2];

// copy array.
for(int i =0;i<n1;i++){
L[i] = a[l+i];
 for(int j=0;j<n2;j++){
 R[i] =a[m+1+j];
 }
}
int i = 0, j = 0;
	 
	        // Initial index of merged subarray array
	        int k = l;           //The purpose of k is to keep track of the current position in the merged array arr
	        
	        while (i < n1 && j < n2) {
	            if (L[i] <= R[j]) {
	                arr[k++] = L[i++];
	               
	            }
	            else {
	                arr[k++] = R[j++];
	                
	            }
	            
	        }
 /* Copy remaining elements of L[] if any */
	        while (i < n1) {
	            arr[k++] = L[i++];
	           
	        }
	 
	        /* Copy remaining elements of R[] if any */
	        while (j < n2) {
	            arr[k++] = R[j++];
	           
	        }
	    }


  



  } 










void sort(int a[], int l , int r){

if(l<r){          //more than one element left and sorting is needed
int m = (l+r)/2;
sort(a,l m);
sort(a,m+1,r);
mergeSort(a,l,m,r);


}




}















}
