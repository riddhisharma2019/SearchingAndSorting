
Time Complexity: O(log n)
Space Complexity: O(1)


public class Tuf{
public static int firstOccur(int a[] , int n , int key){
 int start =0;
 int end = n-1;
 int ans =-1;  // for storing result.

   while(start<=end){
  int mid = start + (end-start) /2;
  if(arr[mid] == key){
   ans = mid;
   end = mid-1;          // leftmost occurence on left side.......

}else if(key>arr[mid]){
      start=mid+1;
}else{
   end =mid-1;
}
   }
  return ans;
}

int lastOccur(int arr[] , int n , int key){
int start =0;
 int end = n-1;
 int ans =-1;  // for storing result.
  if(arr[mid] == key){
   ans = mid;
   start= mid+1;        // rightmost occurence on right side......

}else if(key>arr[mid]){
      start=mid+1;
}else{
   end =mid-1;
}
   }
  return ans;
}
public static void main(String args[]){
 int n = 7;
 int key = 13;
int arr[] = {3,4,13,13,13,20,40};
}

}




}
